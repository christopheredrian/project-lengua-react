{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","sentence","setSentence","response","setResponse","className","Container","Row","Col","xs","Form","Control","as","style","height","onChange","e","target","value","Button","size","onClick","axios","method","url","then","data","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2VA4EeA,MAnEf,WAAgB,IAAD,EAEqBC,mBAAS,IAF9B,mBAEJC,EAFI,KAEMC,EAFN,OAGqBF,mBAAS,IAH9B,mBAGJG,EAHI,KAGMC,EAHN,KAgBX,OACI,yBAAKC,UAAU,eACX,kBAACC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKH,UAAU,eACX,wBAAIA,UAAU,2BAAd,oBAMR,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAEL,kBAACF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAKC,QAAN,CACIC,GAAG,WAEHC,MAAO,CAACC,OAAQ,QAChBC,SAAU,SAAAC,GAAC,OAAId,EAAYc,EAAEC,OAAOC,YAKhD,kBAACX,EAAA,EAAD,CAAKF,UAAU,QACX,kBAACG,EAAA,EAAD,CAAKH,UAAU,cACX,kBAACc,EAAA,EAAD,CACIC,KAAM,KACNC,QAzCF,WAE1BC,IAAM,CACFC,OAAQ,MACRC,IAAI,GAAD,OAXE,8DAWF,qBAA0BvB,KAC9BwB,MAAK,YAAa,IAAXC,EAAU,EAAVA,KACNtB,EAAYsB,QAiCQ,sBASZ,kBAAClB,EAAA,EAAD,CAAKC,GAAI,GAEDN,GACA,6BAAK,8BAAOwB,KAAKC,UAAUzB,EAAU,KAAM,UCrDnD0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a2c7b83.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Form, Container, Row, Button, Col} from 'react-bootstrap';\nimport 'tachyons';\nimport axios from 'axios'\n\nconst ENDPOINT = 'https://project-lengua.herokuapp.com/api/sentiment/sentence';\n\nfunction App() {\n\n    const [sentence, setSentence] = useState(\"\");\n    const [response, setResponse] = useState(\"\");\n\n    const checkSentimentHandler = () => {\n\n        axios({\n            method: 'get',\n            url: `${ENDPOINT}?sentence=${sentence}`,\n        }).then(({data}) => {\n            setResponse(data);\n        });\n\n    };\n\n    return (\n        <div className='vh-100 pt-3'>\n            <Container>\n\n                <Row>\n                    <Col className='text-center'>\n                        <h1 className='pb-3 border-bottom mb-5'>\n                            Project Lengua\n                        </h1>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col xs={6}>\n\n                        <Row>\n                            <Col>\n                                <Form.Control\n                                    as=\"textarea\"\n                                    // rows=\"10\"\n                                    style={{height: \"60vh\"}}\n                                    onChange={e => setSentence(e.target.value)}\n                                />\n                            </Col>\n                        </Row>\n\n                        <Row className='mt-3'>\n                            <Col className='text-right'>\n                                <Button\n                                    size={'lg'}\n                                    onClick={checkSentimentHandler}\n                                >\n                                    Check Sentiment\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xs={6}>\n                        {\n                            response &&\n                            <pre><code>{JSON.stringify(response, null, 2)}</code></pre>\n                        }\n                    </Col>\n                </Row>\n\n            </Container>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}